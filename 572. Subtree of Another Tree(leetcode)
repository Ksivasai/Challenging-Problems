# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
matchedlist = []
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        global matchedlist
        def getsubtree(root,subRoot):
            global matchedlist
            if(root.val==subRoot.val):
                matchedlist.append(root)
            if(root.left!=None):
                getsubtree(root.left,subRoot)
            if(root.right!=None):
                getsubtree(root.right,subRoot)
        
        
        def issame(root,subRoot):
            if(subRoot==None):
                return root==None
            if(root == None):
                return subRoot==None
            if(root.val!=subRoot.val):
                return False
            return issame(root.left,subRoot.left) and issame(root.right,subRoot.right)
        if(root == None):
            return subRoot==None
        if(subRoot==None):
            return root==None
        getsubtree(root,subRoot)
        k=False
        for i in matchedlist:
            k=issame(i,subRoot)
            if(k==True):
                matchedlist=[]
                return True
        matchedlist= []
        return k

The N-queens puzzle involves placing N queens on an N x N chessboard such that no two queens can attack each other. Given an integer N, display all the unique solutions. Each solution should represent a distinct board configuration with '1' indicating a queen and '0' indicating an empty space.

Input Format
The first line of input contains T - the number of test cases. It is followed by T lines, each line contains N.

Output Format
For each test case, print the distinct solutions in lexicographical reverse order, separated by an empty line. If there is no solution for a given test case, print -1.

Input:
2 -- Number of test cases
1 
4

Output:
1 - o/p for 1

0100
0001
1000
0010

0010
1000
0001
0100

Solution :

import copy

ans = []
# checking if the given gris is valid or not
def valid(grid,row,col,n):
    for i in range(row):
        if grid[i][col] == 1:
            return False
    r = row-1
    c = col-1
    while(r >=0 and c >= 0):
        if grid[r][c] == 1:
            return False
        r -= 1
        c -= 1
    r = row -1
    c = col +1
    while r >= 0 and c < n:
        if grid[r][c] == 1:
            return False
        r -= 1
        c += 1
    return True

# function to calculate possible solution
def nqueens(grid,row,n,ans):
    if row == n:
        ans.append(copy.deepcopy(grid))
    else:
        for i in range(n):
            grid[row][i] = 1
            if valid(grid,row,i,n):
                nqueens(grid,row+1,n,ans)
            grid[row][i] = 0

for _ in range(int(input())):
    n = int(input())
    grid = [[0 for i in range(n)] for j in range(n)]
    ans = []
    nqueens(grid,0,n,ans)
    if len(ans) == 0:
        print(-1)
        continue
    for i in ans:
        for j in i:
            print(*j,sep = "")
        print()

